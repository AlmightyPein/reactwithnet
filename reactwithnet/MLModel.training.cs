﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace reactwithnet
{
    public partial class MLModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_1",outputColumnName:@"Symptom_1")      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_2",outputColumnName:@"Symptom_2"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_3",outputColumnName:@"Symptom_3"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_4",outputColumnName:@"Symptom_4"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_5",outputColumnName:@"Symptom_5"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_6",outputColumnName:@"Symptom_6"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_7",outputColumnName:@"Symptom_7"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_8",outputColumnName:@"Symptom_8"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_9",outputColumnName:@"Symptom_9"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_10",outputColumnName:@"Symptom_10"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_11",outputColumnName:@"Symptom_11"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_12",outputColumnName:@"Symptom_12"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_13",outputColumnName:@"Symptom_13"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_14",outputColumnName:@"Symptom_14"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_15",outputColumnName:@"Symptom_15"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_16",outputColumnName:@"Symptom_16"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Symptom_17",outputColumnName:@"Symptom_17"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Symptom_1",@"Symptom_2",@"Symptom_3",@"Symptom_4",@"Symptom_5",@"Symptom_6",@"Symptom_7",@"Symptom_8",@"Symptom_9",@"Symptom_10",@"Symptom_11",@"Symptom_12",@"Symptom_13",@"Symptom_14",@"Symptom_15",@"Symptom_16",@"Symptom_17"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Disease",inputColumnName:@"Disease"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(new LbfgsMaximumEntropyMulticlassTrainer.Options(){L1Regularization=1F,L2Regularization=1F,LabelColumnName=@"Disease",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
